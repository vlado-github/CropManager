//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AzureTestClient.CropServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Crop", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceWebRole1")]
    [System.SerializableAttribute()]
    public partial class Crop : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int cropidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string croptypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime fertilizingtimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fieldfkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime harvesttimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime hillingtimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int illnessfkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int journalfkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime timeofplantingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int wateringfrequencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string wateringperiodField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cropid {
            get {
                return this.cropidField;
            }
            set {
                if ((this.cropidField.Equals(value) != true)) {
                    this.cropidField = value;
                    this.RaisePropertyChanged("cropid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string croptype {
            get {
                return this.croptypeField;
            }
            set {
                if ((object.ReferenceEquals(this.croptypeField, value) != true)) {
                    this.croptypeField = value;
                    this.RaisePropertyChanged("croptype");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime fertilizingtime {
            get {
                return this.fertilizingtimeField;
            }
            set {
                if ((this.fertilizingtimeField.Equals(value) != true)) {
                    this.fertilizingtimeField = value;
                    this.RaisePropertyChanged("fertilizingtime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fieldfk {
            get {
                return this.fieldfkField;
            }
            set {
                if ((this.fieldfkField.Equals(value) != true)) {
                    this.fieldfkField = value;
                    this.RaisePropertyChanged("fieldfk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime harvesttime {
            get {
                return this.harvesttimeField;
            }
            set {
                if ((this.harvesttimeField.Equals(value) != true)) {
                    this.harvesttimeField = value;
                    this.RaisePropertyChanged("harvesttime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime hillingtime {
            get {
                return this.hillingtimeField;
            }
            set {
                if ((this.hillingtimeField.Equals(value) != true)) {
                    this.hillingtimeField = value;
                    this.RaisePropertyChanged("hillingtime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int illnessfk {
            get {
                return this.illnessfkField;
            }
            set {
                if ((this.illnessfkField.Equals(value) != true)) {
                    this.illnessfkField = value;
                    this.RaisePropertyChanged("illnessfk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int journalfk {
            get {
                return this.journalfkField;
            }
            set {
                if ((this.journalfkField.Equals(value) != true)) {
                    this.journalfkField = value;
                    this.RaisePropertyChanged("journalfk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime timeofplanting {
            get {
                return this.timeofplantingField;
            }
            set {
                if ((this.timeofplantingField.Equals(value) != true)) {
                    this.timeofplantingField = value;
                    this.RaisePropertyChanged("timeofplanting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int wateringfrequency {
            get {
                return this.wateringfrequencyField;
            }
            set {
                if ((this.wateringfrequencyField.Equals(value) != true)) {
                    this.wateringfrequencyField = value;
                    this.RaisePropertyChanged("wateringfrequency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string wateringperiod {
            get {
                return this.wateringperiodField;
            }
            set {
                if ((object.ReferenceEquals(this.wateringperiodField, value) != true)) {
                    this.wateringperiodField = value;
                    this.RaisePropertyChanged("wateringperiod");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CropServiceReference.ICropService")]
    public interface ICropService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICropService/InsertCropData", ReplyAction="http://tempuri.org/ICropService/InsertCropDataResponse")]
        int InsertCropData(AzureTestClient.CropServiceReference.Crop crop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICropService/InsertCropData", ReplyAction="http://tempuri.org/ICropService/InsertCropDataResponse")]
        System.Threading.Tasks.Task<int> InsertCropDataAsync(AzureTestClient.CropServiceReference.Crop crop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICropService/DeleteCropData", ReplyAction="http://tempuri.org/ICropService/DeleteCropDataResponse")]
        void DeleteCropData(int crop_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICropService/DeleteCropData", ReplyAction="http://tempuri.org/ICropService/DeleteCropDataResponse")]
        System.Threading.Tasks.Task DeleteCropDataAsync(int crop_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICropService/SelectCropById", ReplyAction="http://tempuri.org/ICropService/SelectCropByIdResponse")]
        AzureTestClient.CropServiceReference.Crop SelectCropById(int crop_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICropService/SelectCropById", ReplyAction="http://tempuri.org/ICropService/SelectCropByIdResponse")]
        System.Threading.Tasks.Task<AzureTestClient.CropServiceReference.Crop> SelectCropByIdAsync(int crop_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICropService/SelectCrops", ReplyAction="http://tempuri.org/ICropService/SelectCropsResponse")]
        AzureTestClient.CropServiceReference.Crop[] SelectCrops();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICropService/SelectCrops", ReplyAction="http://tempuri.org/ICropService/SelectCropsResponse")]
        System.Threading.Tasks.Task<AzureTestClient.CropServiceReference.Crop[]> SelectCropsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICropServiceChannel : AzureTestClient.CropServiceReference.ICropService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CropServiceClient : System.ServiceModel.ClientBase<AzureTestClient.CropServiceReference.ICropService>, AzureTestClient.CropServiceReference.ICropService {
        
        public CropServiceClient() {
        }
        
        public CropServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CropServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CropServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CropServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int InsertCropData(AzureTestClient.CropServiceReference.Crop crop) {
            return base.Channel.InsertCropData(crop);
        }
        
        public System.Threading.Tasks.Task<int> InsertCropDataAsync(AzureTestClient.CropServiceReference.Crop crop) {
            return base.Channel.InsertCropDataAsync(crop);
        }
        
        public void DeleteCropData(int crop_id) {
            base.Channel.DeleteCropData(crop_id);
        }
        
        public System.Threading.Tasks.Task DeleteCropDataAsync(int crop_id) {
            return base.Channel.DeleteCropDataAsync(crop_id);
        }
        
        public AzureTestClient.CropServiceReference.Crop SelectCropById(int crop_id) {
            return base.Channel.SelectCropById(crop_id);
        }
        
        public System.Threading.Tasks.Task<AzureTestClient.CropServiceReference.Crop> SelectCropByIdAsync(int crop_id) {
            return base.Channel.SelectCropByIdAsync(crop_id);
        }
        
        public AzureTestClient.CropServiceReference.Crop[] SelectCrops() {
            return base.Channel.SelectCrops();
        }
        
        public System.Threading.Tasks.Task<AzureTestClient.CropServiceReference.Crop[]> SelectCropsAsync() {
            return base.Channel.SelectCropsAsync();
        }
    }
}
