//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AzureTestClient.CropServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Crop", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceWebRole1")]
    [System.SerializableAttribute()]
    public partial class Crop : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CropTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FertilizingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FieldFKField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime HarvestTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime HillingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IllnessFKField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int JournalFKField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WateringFrequencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WateringPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime timeOfPlantingField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CropType {
            get {
                return this.CropTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CropTypeField, value) != true)) {
                    this.CropTypeField = value;
                    this.RaisePropertyChanged("CropType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FertilizingTime {
            get {
                return this.FertilizingTimeField;
            }
            set {
                if ((this.FertilizingTimeField.Equals(value) != true)) {
                    this.FertilizingTimeField = value;
                    this.RaisePropertyChanged("FertilizingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FieldFK {
            get {
                return this.FieldFKField;
            }
            set {
                if ((this.FieldFKField.Equals(value) != true)) {
                    this.FieldFKField = value;
                    this.RaisePropertyChanged("FieldFK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime HarvestTime {
            get {
                return this.HarvestTimeField;
            }
            set {
                if ((this.HarvestTimeField.Equals(value) != true)) {
                    this.HarvestTimeField = value;
                    this.RaisePropertyChanged("HarvestTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime HillingTime {
            get {
                return this.HillingTimeField;
            }
            set {
                if ((this.HillingTimeField.Equals(value) != true)) {
                    this.HillingTimeField = value;
                    this.RaisePropertyChanged("HillingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IllnessFK {
            get {
                return this.IllnessFKField;
            }
            set {
                if ((this.IllnessFKField.Equals(value) != true)) {
                    this.IllnessFKField = value;
                    this.RaisePropertyChanged("IllnessFK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int JournalFK {
            get {
                return this.JournalFKField;
            }
            set {
                if ((this.JournalFKField.Equals(value) != true)) {
                    this.JournalFKField = value;
                    this.RaisePropertyChanged("JournalFK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WateringFrequency {
            get {
                return this.WateringFrequencyField;
            }
            set {
                if ((this.WateringFrequencyField.Equals(value) != true)) {
                    this.WateringFrequencyField = value;
                    this.RaisePropertyChanged("WateringFrequency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WateringPeriod {
            get {
                return this.WateringPeriodField;
            }
            set {
                if ((object.ReferenceEquals(this.WateringPeriodField, value) != true)) {
                    this.WateringPeriodField = value;
                    this.RaisePropertyChanged("WateringPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime timeOfPlanting {
            get {
                return this.timeOfPlantingField;
            }
            set {
                if ((this.timeOfPlantingField.Equals(value) != true)) {
                    this.timeOfPlantingField = value;
                    this.RaisePropertyChanged("timeOfPlanting");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CropServiceReference.ICropService")]
    public interface ICropService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICropService/InsertCropData", ReplyAction="http://tempuri.org/ICropService/InsertCropDataResponse")]
        void InsertCropData(AzureTestClient.CropServiceReference.Crop crop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICropService/InsertCropData", ReplyAction="http://tempuri.org/ICropService/InsertCropDataResponse")]
        System.Threading.Tasks.Task InsertCropDataAsync(AzureTestClient.CropServiceReference.Crop crop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICropService/DeleteCropData", ReplyAction="http://tempuri.org/ICropService/DeleteCropDataResponse")]
        void DeleteCropData(int crop_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICropService/DeleteCropData", ReplyAction="http://tempuri.org/ICropService/DeleteCropDataResponse")]
        System.Threading.Tasks.Task DeleteCropDataAsync(int crop_id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICropServiceChannel : AzureTestClient.CropServiceReference.ICropService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CropServiceClient : System.ServiceModel.ClientBase<AzureTestClient.CropServiceReference.ICropService>, AzureTestClient.CropServiceReference.ICropService {
        
        public CropServiceClient() {
        }
        
        public CropServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CropServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CropServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CropServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void InsertCropData(AzureTestClient.CropServiceReference.Crop crop) {
            base.Channel.InsertCropData(crop);
        }
        
        public System.Threading.Tasks.Task InsertCropDataAsync(AzureTestClient.CropServiceReference.Crop crop) {
            return base.Channel.InsertCropDataAsync(crop);
        }
        
        public void DeleteCropData(int crop_id) {
            base.Channel.DeleteCropData(crop_id);
        }
        
        public System.Threading.Tasks.Task DeleteCropDataAsync(int crop_id) {
            return base.Channel.DeleteCropDataAsync(crop_id);
        }
    }
}
