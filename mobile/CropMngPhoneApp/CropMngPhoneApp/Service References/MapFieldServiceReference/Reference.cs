//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace CropMngPhoneApp.MapFieldServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapField", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceWebRole1")]
    public partial class MapField : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int FieldIdField;
        
        private int MapFieldIdField;
        
        private int MapIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FieldId {
            get {
                return this.FieldIdField;
            }
            set {
                if ((this.FieldIdField.Equals(value) != true)) {
                    this.FieldIdField = value;
                    this.RaisePropertyChanged("FieldId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MapFieldId {
            get {
                return this.MapFieldIdField;
            }
            set {
                if ((this.MapFieldIdField.Equals(value) != true)) {
                    this.MapFieldIdField = value;
                    this.RaisePropertyChanged("MapFieldId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MapId {
            get {
                return this.MapIdField;
            }
            set {
                if ((this.MapIdField.Equals(value) != true)) {
                    this.MapIdField = value;
                    this.RaisePropertyChanged("MapId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MapFieldServiceReference.IMapFieldService")]
    public interface IMapFieldService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMapFieldService/InsertMapField", ReplyAction="http://tempuri.org/IMapFieldService/InsertMapFieldResponse")]
        System.IAsyncResult BeginInsertMapField(CropMngPhoneApp.MapFieldServiceReference.MapField mapField, System.AsyncCallback callback, object asyncState);
        
        int EndInsertMapField(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMapFieldService/DeleteMapField", ReplyAction="http://tempuri.org/IMapFieldService/DeleteMapFieldResponse")]
        System.IAsyncResult BeginDeleteMapField(int field_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteMapField(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMapFieldService/SelectMapRecordsByFieldId", ReplyAction="http://tempuri.org/IMapFieldService/SelectMapRecordsByFieldIdResponse")]
        System.IAsyncResult BeginSelectMapRecordsByFieldId(int field_id, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<int> EndSelectMapRecordsByFieldId(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMapFieldServiceChannel : CropMngPhoneApp.MapFieldServiceReference.IMapFieldService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertMapFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertMapFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SelectMapRecordsByFieldIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SelectMapRecordsByFieldIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MapFieldServiceClient : System.ServiceModel.ClientBase<CropMngPhoneApp.MapFieldServiceReference.IMapFieldService>, CropMngPhoneApp.MapFieldServiceReference.IMapFieldService {
        
        private BeginOperationDelegate onBeginInsertMapFieldDelegate;
        
        private EndOperationDelegate onEndInsertMapFieldDelegate;
        
        private System.Threading.SendOrPostCallback onInsertMapFieldCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteMapFieldDelegate;
        
        private EndOperationDelegate onEndDeleteMapFieldDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteMapFieldCompletedDelegate;
        
        private BeginOperationDelegate onBeginSelectMapRecordsByFieldIdDelegate;
        
        private EndOperationDelegate onEndSelectMapRecordsByFieldIdDelegate;
        
        private System.Threading.SendOrPostCallback onSelectMapRecordsByFieldIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MapFieldServiceClient() {
        }
        
        public MapFieldServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MapFieldServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MapFieldServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MapFieldServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<InsertMapFieldCompletedEventArgs> InsertMapFieldCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteMapFieldCompleted;
        
        public event System.EventHandler<SelectMapRecordsByFieldIdCompletedEventArgs> SelectMapRecordsByFieldIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CropMngPhoneApp.MapFieldServiceReference.IMapFieldService.BeginInsertMapField(CropMngPhoneApp.MapFieldServiceReference.MapField mapField, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertMapField(mapField, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int CropMngPhoneApp.MapFieldServiceReference.IMapFieldService.EndInsertMapField(System.IAsyncResult result) {
            return base.Channel.EndInsertMapField(result);
        }
        
        private System.IAsyncResult OnBeginInsertMapField(object[] inValues, System.AsyncCallback callback, object asyncState) {
            CropMngPhoneApp.MapFieldServiceReference.MapField mapField = ((CropMngPhoneApp.MapFieldServiceReference.MapField)(inValues[0]));
            return ((CropMngPhoneApp.MapFieldServiceReference.IMapFieldService)(this)).BeginInsertMapField(mapField, callback, asyncState);
        }
        
        private object[] OnEndInsertMapField(System.IAsyncResult result) {
            int retVal = ((CropMngPhoneApp.MapFieldServiceReference.IMapFieldService)(this)).EndInsertMapField(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertMapFieldCompleted(object state) {
            if ((this.InsertMapFieldCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertMapFieldCompleted(this, new InsertMapFieldCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertMapFieldAsync(CropMngPhoneApp.MapFieldServiceReference.MapField mapField) {
            this.InsertMapFieldAsync(mapField, null);
        }
        
        public void InsertMapFieldAsync(CropMngPhoneApp.MapFieldServiceReference.MapField mapField, object userState) {
            if ((this.onBeginInsertMapFieldDelegate == null)) {
                this.onBeginInsertMapFieldDelegate = new BeginOperationDelegate(this.OnBeginInsertMapField);
            }
            if ((this.onEndInsertMapFieldDelegate == null)) {
                this.onEndInsertMapFieldDelegate = new EndOperationDelegate(this.OnEndInsertMapField);
            }
            if ((this.onInsertMapFieldCompletedDelegate == null)) {
                this.onInsertMapFieldCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertMapFieldCompleted);
            }
            base.InvokeAsync(this.onBeginInsertMapFieldDelegate, new object[] {
                        mapField}, this.onEndInsertMapFieldDelegate, this.onInsertMapFieldCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CropMngPhoneApp.MapFieldServiceReference.IMapFieldService.BeginDeleteMapField(int field_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteMapField(field_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CropMngPhoneApp.MapFieldServiceReference.IMapFieldService.EndDeleteMapField(System.IAsyncResult result) {
            base.Channel.EndDeleteMapField(result);
        }
        
        private System.IAsyncResult OnBeginDeleteMapField(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int field_id = ((int)(inValues[0]));
            return ((CropMngPhoneApp.MapFieldServiceReference.IMapFieldService)(this)).BeginDeleteMapField(field_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteMapField(System.IAsyncResult result) {
            ((CropMngPhoneApp.MapFieldServiceReference.IMapFieldService)(this)).EndDeleteMapField(result);
            return null;
        }
        
        private void OnDeleteMapFieldCompleted(object state) {
            if ((this.DeleteMapFieldCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteMapFieldCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteMapFieldAsync(int field_id) {
            this.DeleteMapFieldAsync(field_id, null);
        }
        
        public void DeleteMapFieldAsync(int field_id, object userState) {
            if ((this.onBeginDeleteMapFieldDelegate == null)) {
                this.onBeginDeleteMapFieldDelegate = new BeginOperationDelegate(this.OnBeginDeleteMapField);
            }
            if ((this.onEndDeleteMapFieldDelegate == null)) {
                this.onEndDeleteMapFieldDelegate = new EndOperationDelegate(this.OnEndDeleteMapField);
            }
            if ((this.onDeleteMapFieldCompletedDelegate == null)) {
                this.onDeleteMapFieldCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteMapFieldCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteMapFieldDelegate, new object[] {
                        field_id}, this.onEndDeleteMapFieldDelegate, this.onDeleteMapFieldCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CropMngPhoneApp.MapFieldServiceReference.IMapFieldService.BeginSelectMapRecordsByFieldId(int field_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSelectMapRecordsByFieldId(field_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<int> CropMngPhoneApp.MapFieldServiceReference.IMapFieldService.EndSelectMapRecordsByFieldId(System.IAsyncResult result) {
            return base.Channel.EndSelectMapRecordsByFieldId(result);
        }
        
        private System.IAsyncResult OnBeginSelectMapRecordsByFieldId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int field_id = ((int)(inValues[0]));
            return ((CropMngPhoneApp.MapFieldServiceReference.IMapFieldService)(this)).BeginSelectMapRecordsByFieldId(field_id, callback, asyncState);
        }
        
        private object[] OnEndSelectMapRecordsByFieldId(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<int> retVal = ((CropMngPhoneApp.MapFieldServiceReference.IMapFieldService)(this)).EndSelectMapRecordsByFieldId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSelectMapRecordsByFieldIdCompleted(object state) {
            if ((this.SelectMapRecordsByFieldIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SelectMapRecordsByFieldIdCompleted(this, new SelectMapRecordsByFieldIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SelectMapRecordsByFieldIdAsync(int field_id) {
            this.SelectMapRecordsByFieldIdAsync(field_id, null);
        }
        
        public void SelectMapRecordsByFieldIdAsync(int field_id, object userState) {
            if ((this.onBeginSelectMapRecordsByFieldIdDelegate == null)) {
                this.onBeginSelectMapRecordsByFieldIdDelegate = new BeginOperationDelegate(this.OnBeginSelectMapRecordsByFieldId);
            }
            if ((this.onEndSelectMapRecordsByFieldIdDelegate == null)) {
                this.onEndSelectMapRecordsByFieldIdDelegate = new EndOperationDelegate(this.OnEndSelectMapRecordsByFieldId);
            }
            if ((this.onSelectMapRecordsByFieldIdCompletedDelegate == null)) {
                this.onSelectMapRecordsByFieldIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSelectMapRecordsByFieldIdCompleted);
            }
            base.InvokeAsync(this.onBeginSelectMapRecordsByFieldIdDelegate, new object[] {
                        field_id}, this.onEndSelectMapRecordsByFieldIdDelegate, this.onSelectMapRecordsByFieldIdCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override CropMngPhoneApp.MapFieldServiceReference.IMapFieldService CreateChannel() {
            return new MapFieldServiceClientChannel(this);
        }
        
        private class MapFieldServiceClientChannel : ChannelBase<CropMngPhoneApp.MapFieldServiceReference.IMapFieldService>, CropMngPhoneApp.MapFieldServiceReference.IMapFieldService {
            
            public MapFieldServiceClientChannel(System.ServiceModel.ClientBase<CropMngPhoneApp.MapFieldServiceReference.IMapFieldService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginInsertMapField(CropMngPhoneApp.MapFieldServiceReference.MapField mapField, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = mapField;
                System.IAsyncResult _result = base.BeginInvoke("InsertMapField", _args, callback, asyncState);
                return _result;
            }
            
            public int EndInsertMapField(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("InsertMapField", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteMapField(int field_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = field_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteMapField", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteMapField(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteMapField", _args, result);
            }
            
            public System.IAsyncResult BeginSelectMapRecordsByFieldId(int field_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = field_id;
                System.IAsyncResult _result = base.BeginInvoke("SelectMapRecordsByFieldId", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<int> EndSelectMapRecordsByFieldId(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<int> _result = ((System.Collections.ObjectModel.ObservableCollection<int>)(base.EndInvoke("SelectMapRecordsByFieldId", _args, result)));
                return _result;
            }
        }
    }
}
