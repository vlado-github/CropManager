//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace PhoneApp1.CropServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Crop", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceWebRole1")]
    public partial class Crop : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int cropidField;
        
        private string croptypeField;
        
        private System.DateTime fertilizingtimeField;
        
        private int fieldfkField;
        
        private System.DateTime harvesttimeField;
        
        private System.DateTime hillingtimeField;
        
        private int illnessfkField;
        
        private int journalfkField;
        
        private string nameField;
        
        private System.DateTime timeofplantingField;
        
        private int wateringfrequencyField;
        
        private string wateringperiodField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cropid {
            get {
                return this.cropidField;
            }
            set {
                if ((this.cropidField.Equals(value) != true)) {
                    this.cropidField = value;
                    this.RaisePropertyChanged("cropid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string croptype {
            get {
                return this.croptypeField;
            }
            set {
                if ((object.ReferenceEquals(this.croptypeField, value) != true)) {
                    this.croptypeField = value;
                    this.RaisePropertyChanged("croptype");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime fertilizingtime {
            get {
                return this.fertilizingtimeField;
            }
            set {
                if ((this.fertilizingtimeField.Equals(value) != true)) {
                    this.fertilizingtimeField = value;
                    this.RaisePropertyChanged("fertilizingtime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fieldfk {
            get {
                return this.fieldfkField;
            }
            set {
                if ((this.fieldfkField.Equals(value) != true)) {
                    this.fieldfkField = value;
                    this.RaisePropertyChanged("fieldfk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime harvesttime {
            get {
                return this.harvesttimeField;
            }
            set {
                if ((this.harvesttimeField.Equals(value) != true)) {
                    this.harvesttimeField = value;
                    this.RaisePropertyChanged("harvesttime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime hillingtime {
            get {
                return this.hillingtimeField;
            }
            set {
                if ((this.hillingtimeField.Equals(value) != true)) {
                    this.hillingtimeField = value;
                    this.RaisePropertyChanged("hillingtime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int illnessfk {
            get {
                return this.illnessfkField;
            }
            set {
                if ((this.illnessfkField.Equals(value) != true)) {
                    this.illnessfkField = value;
                    this.RaisePropertyChanged("illnessfk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int journalfk {
            get {
                return this.journalfkField;
            }
            set {
                if ((this.journalfkField.Equals(value) != true)) {
                    this.journalfkField = value;
                    this.RaisePropertyChanged("journalfk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime timeofplanting {
            get {
                return this.timeofplantingField;
            }
            set {
                if ((this.timeofplantingField.Equals(value) != true)) {
                    this.timeofplantingField = value;
                    this.RaisePropertyChanged("timeofplanting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int wateringfrequency {
            get {
                return this.wateringfrequencyField;
            }
            set {
                if ((this.wateringfrequencyField.Equals(value) != true)) {
                    this.wateringfrequencyField = value;
                    this.RaisePropertyChanged("wateringfrequency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string wateringperiod {
            get {
                return this.wateringperiodField;
            }
            set {
                if ((object.ReferenceEquals(this.wateringperiodField, value) != true)) {
                    this.wateringperiodField = value;
                    this.RaisePropertyChanged("wateringperiod");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CropServiceReference.ICropService")]
    public interface ICropService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICropService/InsertCropData", ReplyAction="http://tempuri.org/ICropService/InsertCropDataResponse")]
        System.IAsyncResult BeginInsertCropData(PhoneApp1.CropServiceReference.Crop crop, System.AsyncCallback callback, object asyncState);
        
        int EndInsertCropData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICropService/DeleteCropData", ReplyAction="http://tempuri.org/ICropService/DeleteCropDataResponse")]
        System.IAsyncResult BeginDeleteCropData(int crop_id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteCropData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICropService/SelectCropById", ReplyAction="http://tempuri.org/ICropService/SelectCropByIdResponse")]
        System.IAsyncResult BeginSelectCropById(int crop_id, System.AsyncCallback callback, object asyncState);
        
        PhoneApp1.CropServiceReference.Crop EndSelectCropById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICropService/SelectCrops", ReplyAction="http://tempuri.org/ICropService/SelectCropsResponse")]
        System.IAsyncResult BeginSelectCrops(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<PhoneApp1.CropServiceReference.Crop> EndSelectCrops(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICropServiceChannel : PhoneApp1.CropServiceReference.ICropService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertCropDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertCropDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SelectCropByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SelectCropByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PhoneApp1.CropServiceReference.Crop Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((PhoneApp1.CropServiceReference.Crop)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SelectCropsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SelectCropsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<PhoneApp1.CropServiceReference.Crop> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<PhoneApp1.CropServiceReference.Crop>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CropServiceClient : System.ServiceModel.ClientBase<PhoneApp1.CropServiceReference.ICropService>, PhoneApp1.CropServiceReference.ICropService {
        
        private BeginOperationDelegate onBeginInsertCropDataDelegate;
        
        private EndOperationDelegate onEndInsertCropDataDelegate;
        
        private System.Threading.SendOrPostCallback onInsertCropDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCropDataDelegate;
        
        private EndOperationDelegate onEndDeleteCropDataDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCropDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginSelectCropByIdDelegate;
        
        private EndOperationDelegate onEndSelectCropByIdDelegate;
        
        private System.Threading.SendOrPostCallback onSelectCropByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginSelectCropsDelegate;
        
        private EndOperationDelegate onEndSelectCropsDelegate;
        
        private System.Threading.SendOrPostCallback onSelectCropsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CropServiceClient() {
        }
        
        public CropServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CropServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CropServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CropServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<InsertCropDataCompletedEventArgs> InsertCropDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCropDataCompleted;
        
        public event System.EventHandler<SelectCropByIdCompletedEventArgs> SelectCropByIdCompleted;
        
        public event System.EventHandler<SelectCropsCompletedEventArgs> SelectCropsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhoneApp1.CropServiceReference.ICropService.BeginInsertCropData(PhoneApp1.CropServiceReference.Crop crop, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertCropData(crop, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int PhoneApp1.CropServiceReference.ICropService.EndInsertCropData(System.IAsyncResult result) {
            return base.Channel.EndInsertCropData(result);
        }
        
        private System.IAsyncResult OnBeginInsertCropData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            PhoneApp1.CropServiceReference.Crop crop = ((PhoneApp1.CropServiceReference.Crop)(inValues[0]));
            return ((PhoneApp1.CropServiceReference.ICropService)(this)).BeginInsertCropData(crop, callback, asyncState);
        }
        
        private object[] OnEndInsertCropData(System.IAsyncResult result) {
            int retVal = ((PhoneApp1.CropServiceReference.ICropService)(this)).EndInsertCropData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertCropDataCompleted(object state) {
            if ((this.InsertCropDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertCropDataCompleted(this, new InsertCropDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertCropDataAsync(PhoneApp1.CropServiceReference.Crop crop) {
            this.InsertCropDataAsync(crop, null);
        }
        
        public void InsertCropDataAsync(PhoneApp1.CropServiceReference.Crop crop, object userState) {
            if ((this.onBeginInsertCropDataDelegate == null)) {
                this.onBeginInsertCropDataDelegate = new BeginOperationDelegate(this.OnBeginInsertCropData);
            }
            if ((this.onEndInsertCropDataDelegate == null)) {
                this.onEndInsertCropDataDelegate = new EndOperationDelegate(this.OnEndInsertCropData);
            }
            if ((this.onInsertCropDataCompletedDelegate == null)) {
                this.onInsertCropDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertCropDataCompleted);
            }
            base.InvokeAsync(this.onBeginInsertCropDataDelegate, new object[] {
                        crop}, this.onEndInsertCropDataDelegate, this.onInsertCropDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhoneApp1.CropServiceReference.ICropService.BeginDeleteCropData(int crop_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCropData(crop_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void PhoneApp1.CropServiceReference.ICropService.EndDeleteCropData(System.IAsyncResult result) {
            base.Channel.EndDeleteCropData(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCropData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int crop_id = ((int)(inValues[0]));
            return ((PhoneApp1.CropServiceReference.ICropService)(this)).BeginDeleteCropData(crop_id, callback, asyncState);
        }
        
        private object[] OnEndDeleteCropData(System.IAsyncResult result) {
            ((PhoneApp1.CropServiceReference.ICropService)(this)).EndDeleteCropData(result);
            return null;
        }
        
        private void OnDeleteCropDataCompleted(object state) {
            if ((this.DeleteCropDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCropDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCropDataAsync(int crop_id) {
            this.DeleteCropDataAsync(crop_id, null);
        }
        
        public void DeleteCropDataAsync(int crop_id, object userState) {
            if ((this.onBeginDeleteCropDataDelegate == null)) {
                this.onBeginDeleteCropDataDelegate = new BeginOperationDelegate(this.OnBeginDeleteCropData);
            }
            if ((this.onEndDeleteCropDataDelegate == null)) {
                this.onEndDeleteCropDataDelegate = new EndOperationDelegate(this.OnEndDeleteCropData);
            }
            if ((this.onDeleteCropDataCompletedDelegate == null)) {
                this.onDeleteCropDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCropDataCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCropDataDelegate, new object[] {
                        crop_id}, this.onEndDeleteCropDataDelegate, this.onDeleteCropDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhoneApp1.CropServiceReference.ICropService.BeginSelectCropById(int crop_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSelectCropById(crop_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PhoneApp1.CropServiceReference.Crop PhoneApp1.CropServiceReference.ICropService.EndSelectCropById(System.IAsyncResult result) {
            return base.Channel.EndSelectCropById(result);
        }
        
        private System.IAsyncResult OnBeginSelectCropById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int crop_id = ((int)(inValues[0]));
            return ((PhoneApp1.CropServiceReference.ICropService)(this)).BeginSelectCropById(crop_id, callback, asyncState);
        }
        
        private object[] OnEndSelectCropById(System.IAsyncResult result) {
            PhoneApp1.CropServiceReference.Crop retVal = ((PhoneApp1.CropServiceReference.ICropService)(this)).EndSelectCropById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSelectCropByIdCompleted(object state) {
            if ((this.SelectCropByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SelectCropByIdCompleted(this, new SelectCropByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SelectCropByIdAsync(int crop_id) {
            this.SelectCropByIdAsync(crop_id, null);
        }
        
        public void SelectCropByIdAsync(int crop_id, object userState) {
            if ((this.onBeginSelectCropByIdDelegate == null)) {
                this.onBeginSelectCropByIdDelegate = new BeginOperationDelegate(this.OnBeginSelectCropById);
            }
            if ((this.onEndSelectCropByIdDelegate == null)) {
                this.onEndSelectCropByIdDelegate = new EndOperationDelegate(this.OnEndSelectCropById);
            }
            if ((this.onSelectCropByIdCompletedDelegate == null)) {
                this.onSelectCropByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSelectCropByIdCompleted);
            }
            base.InvokeAsync(this.onBeginSelectCropByIdDelegate, new object[] {
                        crop_id}, this.onEndSelectCropByIdDelegate, this.onSelectCropByIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PhoneApp1.CropServiceReference.ICropService.BeginSelectCrops(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSelectCrops(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<PhoneApp1.CropServiceReference.Crop> PhoneApp1.CropServiceReference.ICropService.EndSelectCrops(System.IAsyncResult result) {
            return base.Channel.EndSelectCrops(result);
        }
        
        private System.IAsyncResult OnBeginSelectCrops(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PhoneApp1.CropServiceReference.ICropService)(this)).BeginSelectCrops(callback, asyncState);
        }
        
        private object[] OnEndSelectCrops(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<PhoneApp1.CropServiceReference.Crop> retVal = ((PhoneApp1.CropServiceReference.ICropService)(this)).EndSelectCrops(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSelectCropsCompleted(object state) {
            if ((this.SelectCropsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SelectCropsCompleted(this, new SelectCropsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SelectCropsAsync() {
            this.SelectCropsAsync(null);
        }
        
        public void SelectCropsAsync(object userState) {
            if ((this.onBeginSelectCropsDelegate == null)) {
                this.onBeginSelectCropsDelegate = new BeginOperationDelegate(this.OnBeginSelectCrops);
            }
            if ((this.onEndSelectCropsDelegate == null)) {
                this.onEndSelectCropsDelegate = new EndOperationDelegate(this.OnEndSelectCrops);
            }
            if ((this.onSelectCropsCompletedDelegate == null)) {
                this.onSelectCropsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSelectCropsCompleted);
            }
            base.InvokeAsync(this.onBeginSelectCropsDelegate, null, this.onEndSelectCropsDelegate, this.onSelectCropsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override PhoneApp1.CropServiceReference.ICropService CreateChannel() {
            return new CropServiceClientChannel(this);
        }
        
        private class CropServiceClientChannel : ChannelBase<PhoneApp1.CropServiceReference.ICropService>, PhoneApp1.CropServiceReference.ICropService {
            
            public CropServiceClientChannel(System.ServiceModel.ClientBase<PhoneApp1.CropServiceReference.ICropService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginInsertCropData(PhoneApp1.CropServiceReference.Crop crop, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = crop;
                System.IAsyncResult _result = base.BeginInvoke("InsertCropData", _args, callback, asyncState);
                return _result;
            }
            
            public int EndInsertCropData(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("InsertCropData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteCropData(int crop_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = crop_id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCropData", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteCropData(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteCropData", _args, result);
            }
            
            public System.IAsyncResult BeginSelectCropById(int crop_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = crop_id;
                System.IAsyncResult _result = base.BeginInvoke("SelectCropById", _args, callback, asyncState);
                return _result;
            }
            
            public PhoneApp1.CropServiceReference.Crop EndSelectCropById(System.IAsyncResult result) {
                object[] _args = new object[0];
                PhoneApp1.CropServiceReference.Crop _result = ((PhoneApp1.CropServiceReference.Crop)(base.EndInvoke("SelectCropById", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSelectCrops(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("SelectCrops", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<PhoneApp1.CropServiceReference.Crop> EndSelectCrops(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<PhoneApp1.CropServiceReference.Crop> _result = ((System.Collections.ObjectModel.ObservableCollection<PhoneApp1.CropServiceReference.Crop>)(base.EndInvoke("SelectCrops", _args, result)));
                return _result;
            }
        }
    }
}
